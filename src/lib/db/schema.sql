-- Create ENUM types first
CREATE TYPE figma_edit_access_status AS ENUM (
  'pending',
  'accepted',
  'declined'
);

CREATE TABLE figma_users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    verified BOOLEAN NOT NULL DEFAULT FALSE,
    picture TEXT
);

CREATE TABLE figma_sessions (
    id TEXT PRIMARY KEY,
    user_id INTEGER NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE figma_email_verification_request (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    email TEXT NOT NULL,
    code TEXT NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE figma_rooms (
    id VARCHAR PRIMARY KEY,
    owner_id INTEGER NOT NULL
);

CREATE TABLE figma_edit_access (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    requester_id INTEGER NOT NULL,
    room_id_requested_for VARCHAR NOT NULL,
    status figma_edit_access_status NOT NULL
);

ALTER TABLE figma_sessions
ADD CONSTRAINT fk_sessions_user
FOREIGN KEY (user_id) REFERENCES figma_users(id) ON DELETE CASCADE; -- Cascade delete sessions if user is deleted

ALTER TABLE figma_email_verification_request
ADD CONSTRAINT fk_email_verification_user
FOREIGN KEY (user_id) REFERENCES figma_users(id) ON DELETE CASCADE; -- Cascade delete requests if user is deleted

ALTER TABLE figma_rooms
ADD CONSTRAINT fk_rooms_owner
FOREIGN KEY (owner_id) REFERENCES figma_users(id) ON DELETE RESTRICT; -- Prevent deleting owner if they still own rooms

ALTER TABLE figma_edit_access
ADD CONSTRAINT fk_edit_access_requester
FOREIGN KEY (requester_id) REFERENCES figma_users(id) ON DELETE CASCADE; -- Cascade delete access record if requester is deleted

ALTER TABLE figma_edit_access
ADD CONSTRAINT fk_edit_access_room
FOREIGN KEY (room_id_requested_for) REFERENCES figma_rooms(id) ON DELETE CASCADE; -- Cascade delete access record if room is deleted


-- figma_users indexes:
-- UNIQUE indexes on username and email are created automatically by the UNIQUE constraint.
-- Index for picture lookup (e.g., GitHub login check)
CREATE INDEX figma_users_picture_idx ON figma_users (picture);
-- Optional: Index for finding unverified users quickly if needed
-- CREATE INDEX figma_users_verified_idx ON figma_users (verified);

-- figma_sessions indexes:
-- PRIMARY KEY index on id is created automatically.
-- Index for finding sessions by user_id (less common but possible)
CREATE INDEX figma_sessions_user_id_idx ON figma_sessions (user_id);
-- Index for cleaning up expired sessions
CREATE INDEX figma_sessions_expires_at_idx ON figma_sessions (expires_at);

-- figma_email_verification_requests indexes:
-- PRIMARY KEY index on id is created automatically.
-- Composite index for verifying OTP (most common lookup)
CREATE INDEX figma_email_verification_requests_user_id_code_idx ON figma_email_verification_request (user_id, code);
-- Index for cleaning up expired requests
CREATE INDEX figma_email_verification_requests_expires_at_idx ON figma_email_verification_request (expires_at);
-- Note: figma_email_verification_requests_user_id_code_idx also covers queries filtering only by user_id.

-- figma_rooms indexes:
-- PRIMARY KEY index on id is created automatically.
-- Index for finding rooms by owner (dashboard queries)
CREATE INDEX figma_rooms_owner_id_idx ON figma_rooms (owner_id);

-- figma_edit_access indexes:
-- PRIMARY KEY index on id is created automatically.
-- Index for finding rooms a user can edit (EditableRooms query)
CREATE INDEX figma_edit_access_requester_id_status_idx ON figma_edit_access (requester_id, status) WHERE status = 'accepted';
CREATE INDEX figma_edit_access_status_room_id_idx ON figma_edit_access (status, room_id_requested_for) WHERE status = 'pending';
CREATE INDEX figma_edit_access_room_id_idx ON figma_edit_access (room_id_requested_for);
